/**
	https://leetcode.com/problems/remove-palindromic-subsequences/description/?envType=problem-list-v2&envId=ehkbkaxt
	
	1332. Remove Palindromic Subsequences
	
	You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

	Return the minimum number of steps to make the given string empty.

	A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

	A string is called palindrome if is one that reads the same backward as well as forward.

	 

	Example 1:

	Input: s = "ababa"
	Output: 1
	Explanation: s is already a palindrome, so its entirety can be removed in a single step.
	Example 2:

	Input: s = "abb"
	Output: 2
	Explanation: "abb" -> "bb" -> "". 
	Remove palindromic subsequence "a" then "bb".
	
	


	Subsequence don't have to be consecutive. ( THEY CAN BE RANDOM ELEMENTS FROM STRING )

	We can delete all characters 'a' in the single operation,
	and then all characters 'b' in the 2nd operation.
	return 2 when string becomes empty
	(BUT IF STRING IS PALINDROME THEM SINGLE OPERATION REQUIRED)

	If it's empty sting, return 0;
	If it's palindrome, return 1;
	Otherwise, we need at least 2 operation.
	
**/

class Solution {
public:
    int removePalindromeSub(string s) {
        
        if(s.length()==0)
        {
            return 0;
        }

        int i=0,j=s.length()-1;

        while(i<j)
        {
            if(s[i] != s[j])
            {
                return 2;
            }
            i++;
            j--;
        }

        return 1;
    }
};


Time:  O(n)
space :  O(1)

